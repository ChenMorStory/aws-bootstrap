AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: String
  Domain:
    Type: String
  SubDomain:
    Type: String
  Certificate:
    Type: String

Outputs:
  ScalingGroup:
    Description: The ScalingGroup
    Value: !Ref ScalingGroup
    Export:
      Name: !Sub "${SubDomain}-ScalingGroup"
  ScalingGroupAZ1:
    Description: The ScalingGroup for AZ1
    Value: !Ref ScalingGroupAZ1
    Export:
      Name: !Sub "${SubDomain}-az1-ScalingGroup"
  ScalingGroupAZ2:
    Description: The ScalingGroup for AZ2
    Value: !Ref ScalingGroupAZ2
    Export:
      Name: !Sub "${SubDomain}-az2-ScalingGroup"

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              awslogs: []
    Properties:
      LaunchTemplateName: !Sub 'LaunchTemplate_${AWS::StackName}'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref EC2AMI
        InstanceType: !Ref EC2InstanceType
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !GetAtt SecurityGroupInternal.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # send script output to /tmp...
            exec > /tmp/part-001.log 2>&1

            # Get latest cfn scripts; https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfninit
            yum install -y aws-cfn-bootstrap

            # Get Node.js 12
            curl --silent --location https://rpm.nodesource.com/setup_12.x | bash -

            # Update all packages
            yum -y update

            # Install dependencies
            yum install -y ruby nodejs

            # Install CodeDeploy agent
            cd /tmp
            curl -O https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto

            # Create a self-signed TLS certificate to communicate with the load balancer
            mkdir -p /home/ec2-user/app/keys
            cd /home/ec2-user/app/keys
            openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=/ST=/L=/O=/CN=localhost" -keyout key.pem -out cert.pem

            # Create logs directory
            mkdir -p /home/ec2-user/app/logs

            # Change app dir owner to ec2-user
            chown -R ec2-user:ec2-user /home/ec2-user/app

            # Signal to CloudFormation that the instance is ready
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource LaunchTemplate
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource ScalingGroup

  ScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT15M"
        WaitOnResourceSignals: "true"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Sub 'ASG_${AWS::StackName}'
      #TODO use placement groups
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      MinSize: 1
      DesiredCapacity: 1
      MaxSize: 5
      HealthCheckGracePeriod: 0
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      # TODO LifecycleHookSpecificationList:
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMaxSize"
            - "GroupInServiceInstances"
      # TODO NotificationConfigurations:
      VPCZoneIdentifier:
        - !Ref SubnetAZ1
        - !Ref SubnetAZ2
      Tags:
          - Key: Name
            Value: !Ref AWS::StackName
            PropagateAtLaunch: "true"

  ScalingGroupAZ1:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT15M"
        WaitOnResourceSignals: "true"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Sub 'ASG_AZ1_${AWS::StackName}'
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
      MinSize: 1
      MaxSize: 5
      HealthCheckGracePeriod: 0
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      # TODO LifecycleHookSpecificationList:
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMaxSize"
            - "GroupInServiceInstances"
      # TODO NotificationConfigurations:
      VPCZoneIdentifier:
        - !Ref SubnetAZ1
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: "true"

  ScalingGroupAZ2:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT15M"
        WaitOnResourceSignals: "true"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Sub 'ASG_AZ2_${AWS::StackName}'
      AvailabilityZones:
        - !Select [ 1, !GetAZs '' ]
      MinSize: 1
      MaxSize: 5
      HealthCheckGracePeriod: 0
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      # TODO LifecycleHookSpecificationList:
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMaxSize"
            - "GroupInServiceInstances"
      # TODO NotificationConfigurations:
      VPCZoneIdentifier:
        - !Ref SubnetAZ2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: "true"


  SecurityGroupInternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName} ${SubDomain}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security group for ${AWS::StackName} ${SubDomain}'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: InstanceRole

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  DNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      Name: !Sub '${SubDomain}.${Domain}.'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets:
        - !Ref SubnetAZ1
        - !Ref SubnetAZ2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref Certificate
      Port: 443
      Protocol: HTTPS

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Port: 8443
      Protocol: HTTPS
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTPS
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetAZ1

  SubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: AZ
          Value: !Select [ 0, !GetAZs '' ]

  SubnetRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetAZ2

  SubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: AZ
          Value: !Select [ 1, !GetAZs '' ]
